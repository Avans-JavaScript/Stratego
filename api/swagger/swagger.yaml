swagger: "2.0"
info:
  version: "0.1"
  title: Stratego
  contact:
    name: Paul Wagener
    email: p.wagener@avans.nl
  description: |
      ![](static/stratego.jpg)

      Met deze API is het mogelijk om Stratego te spelen tegen je medestudenten, of tegen de computer (AI). Het is mogelijk om meerdere potjes tegelijk te spelen, elk tegen een andere tegenstander.

      ## API key

      Om de API te gebruiken heb je een API key nodig. Deze kan je op onderstaande pagina ophalen:

      [API key ophalen](api_key)

      ## Spelregels
      Bij stratego speel je op een speelbord van 10x10 vakjes.
      Aan het begin van het spel staan er twee legers, elk bestaand uit 40 stukken in verschillende rangen, tegenover elkaar. De bedoeling is dat de vlag van de tegenstander wordt veroverd.

      Aan het begin van het spel moeten alle 40 stukken in de onderste vier rijen worden geplaatst. De volgende stukken moeten geplaatst worden:

      Code  | Naam       | Aantal | Bewegen
      ------|------------|--------|----------
      B     | Bom        | 6      | Mag niet bewegen
      1     | Maarschalk | 1      |
      2     | Generaal   | 1      |
      3     | Kolonel    | 2      |
      4     | Majoor     | 3      |
      5     | Kapitein   | 4      |
      6     | Luitenant  | 4      |
      7     | Sergeant   | 4      |
      8     | Mineur     | 5      |
      9     | Verkenner  | 8      | Mag horizontaal en verticaal zo ver mogelijk bewegen, maar niet over andere stukken heen en niet over water. De verkenner mag op die manier ook een stuk proberen te slaan.
      S     | Spion      | 1      |
      F     | Vlag       | 1      | Mag niet bewegen

      Spelers zijn om en om aan de beurt. Als de speler aan de beurt mag hij één van zijn stukken één vakje horizontaal of verticaal verplaatsen, niet diagonaal. Stukken mogen niet over elkaar heen springen. Zoals hierboven te zien is geldt voor sommige stukken een uitzondering.

      In het midden van het bord zijn 8 vakjes water, het is voor geen enkel stuk mogelijk om hier overheen te bewegen.

      Als je een stuk van de tegenstander probeert te slaan door op hetzelfde vakje te bewegen krijg je te zien wat voor soort speelstuk het is. Het stuk met de hoogste waarde wint dan en mag op het vakje staan, het andere stuk wordt van het bord verwijderd. Op deze regel zijn een paar uitzonderingen:

      * Als de vlag gepakt wordt is het spel afgelopen, de winnaar is de speler die de vlag heeft gepakt.
      * Als de spion de maarschalk pakt wint de spion (let op: als de maarschalk de spion pakt wint de maarschalk!)
      * Als de bom wordt gepakt wint de bom, met uitzondering van de mineur die het wint van de bom.

      Je krijgt als speler de stukken van de tegenspeler niet te zien, deze worden in de API aangegeven met de code 'O' (van 'opponent'). Als je ze probeert te pakken krijg je via de actions wel even te zien welk type stuk je probeert te pakken.

      Alle spelregels zijn al geïmplementeerd in de server, je hoeft voor deze opdracht dus alleen maar de GUI te maken die het mogelijk maakt om in de browser een potje te spelen. Je moet in je code wel checken op ongeldige zetten, val de server dus niet lastig met zetten die niet uit te voeren zijn!

      ## Game
      Een *Game* object staat voor 1 potje Stratego. Er zijn een aantal eigenschappen die je kan halen uit het game object:

      **id**: Dit is een unieke identifier voor een game. Let op dat dit een string is en geen int! Deze gebruik je in de API vaak in de URL om informatie over bijvoorbeeld het bord op te halen.

      **opponent**: Dit is de naam van de tegenstander. Als je tegen de computer speelt is dit 'ai'. Als de status van het spel 'waiting_for_opponent' is is deze eigenschap nog niet aanwezig in het Game object.

      **winner**: Als de state van de game 'game_over' is dan staat in deze eigenschap de naam van de winnaar. Bij elke andere state is deze eigenschap niet aanwezig.

      **state**: Dit is de state waar het spel zich in bevindt. Dit is één van de volgende strings:


      state        | uitleg
      ------------ | -------------
      waiting_for_an_opponent | Een Game krijgt deze state als je een Game maakt en er is nog geen andere Game waar je aan mee kan doen. Zodra er iemand anders een game maakt zal die jouw game joinen en zal de game in de state 'waiting_for_pieces' terecht komen. Het is niet mogelijk om tegen jezelf te spelen. Als er al wel een andere game is die op een opponent wacht zal jij die game joinen en zal de game meteen in de state 'waiting_for_pieces' komen. Als je tegen de AI speelt sla je deze state altijd over.
      waiting_for_pieces | Deze state geeft aan dat je nog niet het speelbord hebt doorgegeven. In deze state moet je de speler de mogelijkheid geven om in het spel alle stukken op het bord te plaatsen en deze te submitten. Zodra je hebt gesubmit komt de game in de state 'waiting_for_opponents_pieces', 'my_turn' of 'opponent_turn'. Afhankelijk van of de tegenstander al zijn speelbord heeft opgestuurd.
      waiting_for_opponent_pieces | Bij deze state heb je het speelbord al opgestuurd, maar heeft de tegenstander dat nog niet gedaan. Je moet dan wachten tot het spel vanzelf doorgaat naar de volgende state. Als je tegen de AI speelt kom je nooit in deze state.
      my_turn | Bij deze state is het spel bezig en wacht de server tot je een move post. Zodra je een move doet komt het spel in de state 'opponent_turn', tenzij je tegen de computer speelt.
      opponent_turn | Als je een move hebt gedaan komt de game in deze state. Je moet dan wachten tot de tegenstander een zet heeft gedaan, het spel komt dan vanzelf weer in een andere state. Als je tegen de AI speelt komt de game nooit in deze state. De computer doet meteen zijn zet en je bent meteen weer aan de beurt.
      game_over | Als van één van de spelers de vlag heeft gepakt is het spel afgelopen en is er iemand de winnaar. Het is niet meer mogelijk om zetten te doen.

      ![States](static/states.svg)

      ## Board
      Een *Board* object geeft een weergave van het speelbord. Dit is een array van 10 groot (1 voor elke rij op het speelbord), met op elke plek weer een array van 10 groot (1 voor elke kolom op het speelbord).

      In deze array staat op elke plek een string met de 1-letterige code van het speelstuk (zie boven de tabel voor welke codes bij welke speelstukken horen).

      Op elke plek waar een speelstuk van de tegenstander staat staat `'O'`. Als er geen speelstuk op een vakje staat staat er `' '` (spatie) op die plek.

      Een voorbeeld van een speelbord object dat je kan terugkrijgen is:

      ```json
      [['O',  'O',  'O',  'O',  'O',  'O',  'O',  'O',  'O',  'O'],
       ['O',  'O',  'O',  'O',  'O',  'O',  'O',  'O',  'O',  'O'],
       ['O',  'O',  'O',  'O',  'O',  'O',  'O',  'O',  'O',  'O'],
       ['O',  'O',  'O',  'O',  'O',  'O',  'O',  'O',  'O',  'O'],
       [' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' '],
       [' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' '],
       ['7',  'B',  '5',  '2',  '9',  '9',  '1',  '8',  '9',  'B'],
       ['B',  '7',  '9',  '1',  '4',  '5',  '8',  '5',  '3',  '9'],
       ['7',  'B',  '4',  '8',  '6',  '4',  '3',  '8',  '7',  '6'],
       ['B',  'F',  'B',  '5',  '9',  '6',  '6',  '9',  '9',  '8']]
      ```
      Dit is het speelbord zoals het ook op [deze wiki pagina](https://nl.wikipedia.org/wiki/Stratego) te zien is.

      Bij sommige API calls heb je te maken met een coordinaat. De `row`s zijn de rijen van boven naar beneden en de `column`s zijn de kolommen van links naar rechts. Hieronder zie je het hele bord met in elk vakje het `row,column` coordinaat


      | 0,0 | 0,1 | 0,2 | 0,3 | 0,4 | 0,5 | 0,6 | 0,7 | 0,8 | 0,9
      | -
      | 1,0 | 1,1 | 1,2 | 1,3 | 1,4 | 1,5 | 1,6 | 1,7 | 1,8 | 1,9
      | 2,0 | 2,1 | 2,2 | 2,3 | 2,4 | 2,5 | 2,6 | 2,7 | 2,8 | 2,9
      | 3,0 | 3,1 | 3,2 | 3,3 | 3,4 | 3,5 | 3,6 | 3,7 | 3,8 | 3,9
      | 4,0 | 4,1 | **4,2*** | **4,3*** | 4,4 | 4,5 | **4,6*** | **4,7*** | 4,8 | 4,9
      | 5,0 | 5,1 | **5,2*** | **5,3*** | 5,4 | 5,5 | **5,6*** | **5,7*** | 5,8 | 5,9
      | 6,0 | 6,1 | 6,2 | 6,3 | 6,4 | 6,5 | 6,6 | 6,7 | 6,8 | 6,9
      | 7,0 | 7,1 | 7,2 | 7,3 | 7,4 | 7,5 | 7,6 | 7,7 | 7,8 | 7,9
      | 8,0 | 8,1 | 8,2 | 8,3 | 8,4 | 8,5 | 8,6 | 8,7 | 8,8 | 8,9
      | 9,0 | 9,1 | 9,2 | 9,3 | 9,4 | 9,5 | 9,6 | 9,7 | 9,8 | 9,9

      Het speelbord is altijd zo gedraaid dat de tegenstander in rij 0 tot en met 4 begint en de speler in rij 6 tot en met 9 begint.

      De vakjes met een sterretje erbij zijn water, op deze plekken kan nooit een speelstuk komen te staan.

      ## Actions
      In de API komt het begrip actions naar voren. Dit zijn alle acties die gebeuren tijdens een potje Stratego. Denk hierbij aan: een speelstuk verplaatsen, een speelstuk te zien krijgen van de tegenstander of een speelstuk verwijderen van het bord omdat die geslagen is.

      Actions heb je alleen nodig als je voor de extra features gaat (animaties, bijhouden welke speelstukken van de vijand waar staan, historie laten zien). Ga je alleen voor de voldoende, dan hoef je alleen te weten hoe je een move doet en kan je alles hieronder negeren.

      Alles wat er gebeurd tijdens een potje Stratego wordt bijgehouden in een lijst van actions. Je zou als je wil kunnen beginnen met het startbord (staat in het Game object), alle actions die er zijn er op uitvoeren en uitkomen bij hoe het huidige bord er uit ziet.

      Er zijn drie soorten actions, te herkennen aan de property `'type'`: `'reveal_piece'`, `'remove_piece'` of `'move_piece'`.

      Een action heeft ook altijd de property `'square'`, maar die betekent voor elk type net iets anders.

      ### Reveal

      Als je een speelstuk van de tegenstander slaat door er op te gaan staan krijg je te weten welk type speelstuk dit is (Maarschalk, Bom, etc). Dit kan je in jouw spel gebruiken om te laten zien welk type het speelstuk van de tegenstander was voordat je speelstukken van het bord haalt.

      Als extraatje kan je als jouw stuk verliest van die van de tegenstander het speelstuk van de tegenstander met deze informatie markeren. Zo maak je het de speler makkelijker zodat hij deze het type van het speelstuk waarvan hij net heeft verloren niet meer hoeft te onthouden.

      De `'square'` eigenschap is het coordinaat van het speelstuk van de tegenstander dat je te weten komt.

      In de `'piece'` eigenschap van de action staat welk type dat speelstuk is.

      ### Destroy

      Deze actie staat voor een speelstuk dat van het bord moet worden verwijderd omdat het verloren heeft in een aanval.

      De `square` eigenschap geeft de positie aan van het verliezende speelstuk *voordat* het heeft bewogen.

      Deze actie is vooral bedoeld als je een animatie wil doen met het verliezende speelstuk.

      ### Move

      Het laatste type action is de move. Deze kan je gebruiken om een animatie te doen van een speelstuk over het bord. De `'square'` eigenschap is het coordinaat van het stuk dat gaat bewegen. De `'square_to'` eigenschap is het coordinaat waar het heen beweegt.

      De acties staan per aanval altijd in de volgorde:

      1. reveal
      * destroy
      * move

      ## AI
      De zetten die de AI doet zijn allemaal willekeurig. Het is dus vrij makkelijk om van de AI te winnen.

      Als je tegen de AI speelt zal deze altijd met het onderstaande bord starten:

      ![](static/ai_start_board.png)



      # Klik op 'Expand Operations' hieronder om de API te zien.


host: strategoavans.herokuapp.com
basePath: /api
schemes:
  - http
  - https
consumes:
  - application/json
produces:
  - application/json
paths:
  /users/me:
    get:
      description: Haal gegevens op over jezelf
      security:
        - api: []
      responses:
        200:
          description: Gegevens over jezelf
          schema:
            $ref: "#/definitions/User"

  /games:
    get:
      description: Haal een lijst van alle games op waar je als speler aan mee doet.
      security:
        - api: []
      responses:
        200:
          description: Array van games
          schema:
            type: array
            items:
              $ref: "#/definitions/Game"

    post:
      description: Maak een nieuwe game aan
      parameters:
        - name: ai
          in: body
          description: Geeft aan of je een game wil tegen de computer of tegen iemand anders
          schema:
            required:
            - ai
            properties:
              ai:
                type: boolean
          required: true
      security:
        - api: []
      responses:
        "200":
          description: De net aangemaakte game. Als er meteen een tegenstander gevonden kon worden is de state "waiting_for_pieces". Anders is deze "waiting_for_opponent".
          schema:
            $ref: "#/definitions/Game"
        default:
          description: "Fout"
          schema:
            $ref: "#/definitions/Error"
    delete:
      description: Verwijder alle games waar je aan mee doet. Ongeacht in welke state ze zich bevinden.
      security:
        - api: []
      responses:
        200:
          description: Alle games zijn verwijderd
  /games/{id}:
    get:
      parameters:
      - name: id
        in: path
        description: Het id van de game
        required: true
        type: string
        maxLength: 5
        minLength: 5
      description: Haal de informatie op van een bepaalde game
      security:
        - api: []
      responses:
        200:
          description: De game
          schema:
            $ref: "#/definitions/Game"
        404:
          description: Als de game met het gegeven ID niet bestaat
    delete:
      parameters:
      - name: id
        in: path
        description: Het id van de game
        required: true
        type: string
        maxLength: 5
        minLength: 5
      description: Verwijder een game waar je aan meedoet. Ongeacht in welke state het zich bevindt.
      security:
        - api: []
      responses:
        200:
          description: Als de game is verwijderd
        404:
          description: Als de game met het gegeven ID niet bestaat

  /games/{id}/start_board:
    post:
      description: Stuur de positie van de speelstukken naar de server. Dit kan alleen als de game in de status 'waiting_for_pieces' is.
      parameters:
        - name: id
          in: path
          description: Id van de game
          type: string
          required: true
          maxLength: 5
          minLength: 5
        - name: board
          in: body
          description: Een 4x10 speelbord met de 4 rijen van de speelstukken zoals de speler deze als startpositie wil opstellen.
          schema:
            $ref: "#/definitions/StartBoard"
          required: true
      security:
        - api: []
      responses:
        201:
          description: Het speelbord is aangemaakt
          schema:
            $ref: "#/definitions/Game"
        default:
          description: Fout
          schema:
            $ref: "#/definitions/Error"

  /games/{id}/actions:
    get:
      description: |
        Krijg een lijst van alle actions sinds het spel is begonnen, van zowel jezelf als van de tegenstander. Dit is handig als je animaties wil toevoegen of als je wil bijhouden welk speelstuk van de tegenstander waar staat.

        Let op dat een action niet alleen een verplaatsing van een speelstuk hoeft te zijn. Lees het hoofdstuk 'Move' voor meer informatie hierover.

        De actions zijn gesorteerd van minst recent (eerste zet) naar meest recent (laatste zet). Deze API heb je alleen nodig als je voor de extra's gaat.
      parameters:
        - name: id
          in: path
          description: Id van de game
          type: string
          maxLength: 5
          minLength: 5
          required: true
      security:
        - api: []
      responses:
        200:
          description: Een lijst van alle acties
          schema:
            type: array
            items:
              $ref: "#/definitions/Action"
        default:
          description: Fout
          schema:
            $ref: "#/definitions/Error"

    post:
      description: Stuur een verplaatsing van speelstuk door om te doen. Dit kan alleen als het spel in de state 'my_turn' is.
      parameters:
        - name: id
          in: path
          description: Id van de game
          type: string
          maxLength: 5
          minLength: 5
          required: true
        - name: move
          in: body
          description: Een verschuiving van een speelstuk
          schema:
            properties:
              square:
                $ref: "#/definitions/Square"
              square_to:
                $ref: "#/definitions/Square"
          required: true
      security:
        - api: []
      responses:
        200:
          description: |
            De verschuiving is uitgevoerd. In de output zie je de nieuwe state van de Game en alle acties die zijn uitgevoerd naar aanleiding van de verschuiving.

            Bij een normale verschuiving is dit alleen de actie 'move_piece'. Als er een stuk geslagen wordt zijn dit opeenvolgend de acties:

            - reveal_piece
            - remove_piece
            - move_piece
          schema:
            properties:
              game:
                $ref: "#/definitions/Game"
              actions:
                type: array
                items:
                  $ref: "#/definitions/Action"
        default:
          description: Fout
          schema:
            $ref: "#/definitions/Error"

securityDefinitions:
  api:
    type: apiKey
    in: query
    name: api_key

definitions:
  Error:
    required: [message]
    properties:
      message:
        type: string

  Game:
    description: Informatie over een game
    example:
      id: 4F6tY
      opponent: Paul Wagener
      state: my_turn
    required: [id, state]
    properties:
      id:
        type: string
        description: Een unieke identifier voor de game
      opponent:
        type: string
        description: De naam van de tegenstander
      winner:
        type: string
        description: De naam van de winnaar (alleen aanwezig als de status 'game_over' is)
      state:
        type: string
        description: De status waar het spel zich in bevind
        example: my_turn
        enum:
          - waiting_for_an_opponent
          - waiting_for_pieces
          - waiting_for_opponents_pieces
          - my_turn
          - opponent_turn
          - game_over
      board:
        $ref: "#/definitions/Board"
      start_board:
        $ref: "#/definitions/Board"

  StartBoard:
    type: array
    example:
      [['7',  'B',  '5',  '2',  '9',  '9',  '1',  '8',  '9',  'B'],
       ['B',  '7',  '9',  '1',  '4',  '5',  '8',  '5',  '3',  '9'],
       ['7',  'B',  '4',  '8',  '6',  '4',  '3',  '8',  '7',  '6'],
       ['B',  'F',  'B',  '5',  '9',  '6',  '6',  '9',  '9',  '8']]
    minItems: 4
    maxItems: 4
    description: De startpositie van alle speelstukken van de speler
    items:
      type: array
      minItems: 10
      maxItems: 10
      items:
        $ref: "#/definitions/Piece"
  Board:
    type: array
    example:
      [['O',  'O',  'O',  'O',  'O',  'O',  'O',  'O',  'O',  'O'],
       ['O',  'O',  'O',  'O',  'O',  'O',  'O',  'O',  'O',  'O'],
       ['O',  'O',  'O',  'O',  'O',  'O',  'O',  'O',  'O',  'O'],
       ['O',  'O',  'O',  'O',  'O',  'O',  'O',  'O',  'O',  'O'],
       [' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' '],
       [' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' '],
       ['7',  'B',  '5',  '2',  '9',  '9',  '1',  '8',  '9',  'B'],
       ['B',  '7',  '9',  '1',  '4',  '5',  '8',  '5',  '3',  '9'],
       ['7',  'B',  '4',  '8',  '6',  '4',  '3',  '8',  '7',  '6'],
       ['B',  'F',  'B',  '5',  '9',  '6',  '6',  '9',  '9',  '8']]
    minItems: 10
    maxItems: 10
    description: De positie van alle speelstukken op het bord.
    items:
      type: array
      minItems: 10
      maxItems: 10
      items:
        $ref: "#/definitions/Piece"
  Action:
    type: object
    description: Informatie over iets wat in het spel is gebeurd
    example:
      type: reveal
      piece: "4"
      square:
        row: 3
        column: 6
    properties:
      type:
        type: string
        description: Het soort actie
        enum:
          - reveal_piece
          - remove_piece
          - move_piece
      piece:
        $ref: "#/definitions/Piece"
      square:
        $ref: "#/definitions/Square"
      square_to:
        $ref: "#/definitions/Square"

  Square:
    type: object
    description: Coordinaat van een vakje op het speelbord
    properties:
      row:
        minimum: 0
        maximum: 9
        type: integer
      column:
        minimum: 0
        maximum: 9
        type: integer

  User:
    type: object
    description: Gegevens van een user
    properties:
      id:
        type: string
      name:
        type: string

  Piece:
    type: string
    description: Zie documentatie boven voor een beschrijving van alle speelstukken
    enum:
      - 'B'
      - '9'
      - '8'
      - '7'
      - '6'
      - '5'
      - '4'
      - '3'
      - '2'
      - '1'
      - 'S'
      - 'F'
      - 'O'
